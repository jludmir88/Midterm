{
    "contents" : "#' A method to calculate the Trapezoidal and Simpson sums of a function.\n#'\n#' Creates objects of either class 'Trapezoid' or 'Simpson'\n#'\n#' An object of the these classes has the following slots:\n#' @param x The x values of the function you use.\n#' @param y The y values of the function you use.\n#' @param a The start of the integration which is a point on the x-axis.\n#' @param b The end of the integration which is a different point on the x-axis.\n#' @param choose_calc A user choice to determine which sum you decide to calculate.\n#'\n#' @return An object of class 'trapezoid' or 'simpson' containing\n#' \\item {x} The x-values of the function.\n#' \\item {y} The y-values of the function\n#' \\item {a} The starting point on the x-axis of integration.\n#' \\item {b} The ending point on the x-axis of integration.\n#' \\item {calc} The resulting Trapezoidal or Simpson sum by integration.\n#'\n#' @author Joseph Ludmir: \\email{jludmir@@wustl.edu}\n#' @examples\n#' x <- c(1,2,3,4)\n#' y <- 2*x\n#' a <- 0\n#' b <- 5\n#' integrateIt(x, y, a, b, t)\n#' integrateIt(x, y, a, b, s)\n#'\n#' @seealso \\code{\\link{trapezoid}}, \\code{\\link{simpson}}\n#' @aliases integrateIt-class\n#' @rdname integrateIt\n#' @export\nsetGeneric(\"integrateIt\",\n           def = function(x, y, a, b, choose_calc)\n           {standardGeneric(\"integrateIt\")}\n          )\n\n\n#' @export\nsetMethod(\"integrateIt\",\n          definition = function(x, y, a, b, choose_calc){\n            # For this h we use the number of x points minus one because were looking\n            # at the number of intervals.\n            h <- (b-a)/((length(x)-1))\n            x_values <- which(x == a):which(x == b)\n            y_values <- which(y == a):which(y == b)\n            if(choose_calc = t){\n            sum <- (h/2)*(y_values[1] + y_values[length(y_values)]\n                          + 2*(y_values[2]:y_values[length(y_values)-1]))\n            trap_calc <- new(\"trapezoid\", x = x_values, y = y_values,\n                             a = a, b = b, calc = sum)\n            return(trap_calc)\n            }\n            if(choose_calc = s){\n            sum <- (h/3)*\n",
    "created" : 1458788720641.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3141674265",
    "id" : "5FBE64F8",
    "lastKnownWriteTime" : 1458793101,
    "path" : "~/integrateIt/Midterm/R/integrateIt.R",
    "project_path" : "R/integrateIt.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}