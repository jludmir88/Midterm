{
    "contents" : "#' A method to calculate the Trapezoidal and Simpson sums of a function.\n#'\n#' Creates objects of either class 'Trapezoid' or 'Simpson'\n#'\n#' An object of the these classes has the following slots:\n#' @param x The x values of the function you use.\n#' @param y The y values of the function you use.\n#' @param a The start of the integration which is a point on the x-axis.\n#' @param b The end of the integration which is a different point on the x-axis.\n#' @param choose_calc A character string to determine which sum you decide to calculate.\n#'\n#' @return An object of class 'trapezoid' or 'simpson' containing\n#' \\item{x} The x-values of the function.\n#' \\item{y} The y-values of the function\n#' \\item{a} The starting point on the x-axis of integration.\n#' \\item{b} The ending point on the x-axis of integration.\n#' \\item{calc} The resulting Trapezoidal or Simpson sum by integration.\n#' @author Joseph Ludmir: \\email{jludmir@@wustl.edu}\n#' @examples\n#' x <- c(1,2,3,4)\n#' y <- 2*x\n#' a <- 0\n#' b <- 5\n#' integrateIt(x, y, a, b, \"t\")\n#' integrateIt(x, y, a, b, \"s\")\n#'\n#' @seealso \\code{\\link{trapezoid}}, \\code{\\link{simpson}}\n#' @aliases integrateIt-class\n#' @rdname integrateIt\n#' @export\nsetGeneric(\"integrateIt\",\n           ## Sets generic method\n           def = function(x, y, a, b, choose_calc)\n           {standardGeneric(\"integrateIt\")}\n)\n\n\n#' @export\nsetMethod(\"integrateIt\",\n          definition = function(x, y, a, b, choose_calc){\n            ## Setting the x values that we care about based on the user choices of a and b.\n            x_start <- which(x == a)\n            x_end <- which(x == b)\n            ## Create h using its formula\n            h <- ((b-a)/((x_end - x_start)))\n            ## The amount of x-values to be used\n            x_size <- (x_end - x_start - 1)\n            if(choose_calc == \"t\"){\n            ## For the occasion in which there are only two intervals.\n              if(x_size == 1){\n                int_trap <- (h/2) * (y[x_start] + y[x_end])\n                trap_calc <- new(\"trapezoid\", x = x, y = y,\n                                 a = a, b = b, calc = int_trap)\n                return(trap_calc)\n              } else {\n              ## Multiplies h/2 by the addition of the first and last y values and\n              ## the doubling of all the values in the middle.\n                int_trap <- (h/2)*((y[x_start] + y[x_end]) +\n                                     sum(2*(y[(x_start+1):(x_end-1)])))\n                trap_calc <- new(\"trapezoid\", x = x, y = y,\n                                 a = a, b = b, calc = int_trap)\n                return(trap_calc)\n              }\n            }\n            ## The case in which you are only looking at two intervals.\n            if(choose_calc == \"s\"){\n              if((x_size) == 1){\n                int_simp <- (h/3)*(y[x_start] + y[x_end])\n                simp_calc <- new(\"simpson\", x = x, y = y,\n                                 a = a, b = b, calc = int_simp)\n                return(simp_calc)\n              } else {\n                ## Essentially divides the y values in 3 groups, the first and last,\n                ## the y-values at even indexes to be multiplied by four and the y-\n                ## values at odd indexes to be multiplied by two. Then we multiply h/3\n                ## by the sum of the entire total.\n                multfour <- seq(x_start+1, x_end-1, 2)\n                multtwo <- seq(x_start+2, x_end-2, 2)\n                y_valstwo <- y[multtwo]\n                y_valsfour <- y[multfour]\n                int_simp <- h/3*(y[x_start] + sum(4*y_valsfour) +sum(2*y_valstwo) +\n                            y[x_end])\n                simp_calc <- new(\"simpson\", x = x, y = y,\n                                 a = a, b = b, calc = int_simp)\n\n                return(simp_calc)\n              }\n            }\n          })\n",
    "created" : 1458788720641.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "473205418",
    "id" : "5FBE64F8",
    "lastKnownWriteTime" : 1458809543,
    "path" : "~/integrateIt/Midterm/R/integrateIt.R",
    "project_path" : "R/integrateIt.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}